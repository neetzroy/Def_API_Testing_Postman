{
	"info": {
		"_postman_id": "7c220949-e5a6-4370-b891-53159d9ae5ae",
		"name": "EasyAutomate_utb",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22327316",
		"_collection_link": "https://restless-capsule-487837.postman.co/workspace/Automation-Testing~45fe600a-4ed8-487f-a991-9bd8724e9514/collection/22327316-7c220949-e5a6-4370-b891-53159d9ae5ae?action=share&source=collection_link&creator=22327316"
	},
	"item": [
		{
			"name": "Sample Testcases",
			"item": [
				{
					"name": "StatusCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status check OK\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"//Response time check\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "query para check in endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Status check OK\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"//Response time check\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?id=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "JsonBody Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//body exists OK check\r",
									"pm.test(\"response should be okay to process\",function ()\r",
									"{\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.have.jsonBody(3);\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"//exact body match\r",
									"pm.test(\"Exact Body Match\", function (){\r",
									"    pm.response.to.have.body('\"https://reqres.in/#support-heading\"');\r",
									"});\r",
									"\r",
									"//partial body match/ body contains\r",
									"pm.test(\"json body partial value check\", function (){\r",
									"    var jsonText = pm.response.text();\r",
									"    pm.expect(jsonText).to.include(\"ReqRes\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EnvntCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"check the active environment\",function (){\r",
									"    var env = pm.environment.name;\r",
									"    console.log(env);\r",
									"    pm.expect(pm.environment.name).to.eql(\"QA\");\r",
									"});\r",
									"\r",
									"/* if(env === \"QA\"){\r",
									"    //test\r",
									"}else {\r",
									"    //test\r",
									"} */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "XML to Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"/*\r",
									"\r",
									"//convert xml body to json\r",
									"\r",
									"pm.test(\"Check value\", function() {\r",
									"  const response = xml2Json(responseBody);\r",
									"  pm.expect(response.age).to.eql(30);\r",
									"  pm.expect(response.name).to.eql('John');\r",
									"});\r",
									"\r",
									"//nested value check\r",
									"pm.test(\"Check value\", function(){\r",
									"    const response = xml2Json(responseBody);\r",
									"    pm.expect(response.products.0.category).to.eql('Book');\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Header Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check header exists\r",
									"pm.test(\"header exists check\", function(){\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"    var hdr = pm.response.headers.get('Content-Type');\r",
									"    console.log(hdr);\r",
									"});\r",
									"\r",
									"pm.test(\"header has value\", function()\r",
									"{\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cookies Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check cookie exists\r",
									"pm.test(\"Cokkie exists\", function(){\r",
									"    pm.expect(pm.cookies.has('session-id')).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"//check the cookie has value\r",
									"pm.test(\"cookie has value check\", function(){\r",
									"    var cook = pm.cookies.get('session-id');\r",
									"    console.log(cook);\r",
									"    pm.expect(pm.cookies.get('session-id')).to.eql('355-2495843-8219143');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "auth-cookie",
								"value": "true",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://www.amazon.com.au/CRZ-YOGA-Feeling-Stretchy-Leggings/dp/B07GZLZFLP?ref_=Oct_DLandingS_D_983b9cf0_60&smid=ACRFSBSU02MFW",
							"protocol": "https",
							"host": [
								"www",
								"amazon",
								"com",
								"au"
							],
							"path": [
								"CRZ-YOGA-Feeling-Stretchy-Leggings",
								"dp",
								"B07GZLZFLP"
							],
							"query": [
								{
									"key": "ref_",
									"value": "Oct_DLandingS_D_983b9cf0_60"
								},
								{
									"key": "smid",
									"value": "ACRFSBSU02MFW"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Property check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API response contains the expected fields', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('page', 3);\r",
									"    pm.expect(response).to.have.property('support');\r",
									"})\r",
									"\r",
									"pm.test('API response contains the expected property', () => {\r",
									"    const response = pm.response.json();\r",
									"    const urlVal = response.support.url;\r",
									"    const expUrl = \"https://reqres.in/#support-heading\";\r",
									"    pm.expect(urlVal).to.equal(expUrl);\r",
									"})\r",
									"\r",
									"// Check if the \"url\" attribute in the \"support\" object has a non-empty value\r",
									"pm.test(\"URL in support object is not empty\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.support.url).to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Protocol Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the protocol from the request URL\r",
									"const protocol = pm.request.url.protocol;\r",
									"\r",
									"// Check if the protocol is HTTPS\r",
									"pm.test(\"API is using HTTPS\", function () {\r",
									"    pm.expect(protocol).to.equal(\"https\");\r",
									"});\r",
									"// Check if the protocol is HTTP\r",
									"pm.test(\"API is using HTTP\", function () {\r",
									"    pm.expect(protocol).to.equal(\"http\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=3",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "initialChecks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"pm.test('Status code name has string :OK', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"pm.test('Content-Type is present', function () {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"\r",
									"console.log(pm.variables.get('companyCode'))\r",
									"pm.test('get a variable', function () {\r",
									"    const getVar = pm.variables.get('companyCode');\r",
									"    console.log(getVar);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"pm.test('data', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const mobj = jsonData.data.filter(m => m.first_name === 'Michael');\r",
									"    console.log(mobj);\r",
									"    const mobj1 = jsonData.data.find(m => m.last_name === 'Lawson');\r",
									"    console.log(mobj1);\r",
									"    pm.expect(mobj1).to.be.an('object', 'obj not found');\r",
									"})\r",
									"\r",
									"pm.test(\"Properties test\",function()\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"    const mobj = jsonData.data.find(m=>m.first_name===\"Michael\");\r",
									"    pm.expect(mobj).to.be.an('object').that.includes.all.keys('id','email','first_name','last_name','avatar');\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "stringChecks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Body matches string', function () {\r",
									"    pm.expect(pm.response.text()).to.include('Lindsay');\r",
									"})\r",
									"\r",
									"pm.test('Body matches string', function () {\r",
									"    pm.expect(pm.response.text()).to.include('Michael');\r",
									"})\r",
									"\r",
									"pm.test('All books have a title check', function () {\r",
									"    const books = pm.response.json();\r",
									"    console.log(books);\r",
									"    pm.expect(books.data.every(book => {\r",
									"        return book.email !== undefined;\r",
									"    })).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Format checks\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.page).to.be.a('number');\r",
									"    pm.expect(responseBody.page).to.be.above(0);\r",
									"    pm.expect(responseBody.data[0].first_name).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Driven Testcases",
			"item": [
				{
					"name": "Set&Get Collection Vars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//setting and getting and printing Collection variables.\r",
									"pm.collectionVariables.set(\"email\", \"testemail@com\");\r",
									"pm.collectionVariables.set(\"password\", \"pass123\");\r",
									"\r",
									"var em = pm.collectionVariables.get(\"email\");\r",
									"var pw = pm.collectionVariables.get(\"password\");\r",
									"\r",
									"console.log(em +''+pw);\r",
									"\r",
									"\r",
									"//check set email is same as email in json response.\r",
									"pm.test(\"check set em collection var is same as email in Json body\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(em);\r",
									"})\r",
									"//check set pw is same as password in json response.\r",
									"pm.test(\"check set pw collection var is same as password in Json body\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.password).to.eql(pw);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"{{email}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://reqres.in/api/register/prepod"
					},
					"response": []
				}
			]
		},
		{
			"name": "Extract Data & Chaining Reqs",
			"item": [
				{
					"name": "Request 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//how to access/pass a value from one request to another. \r",
									"//Request 1\r",
									"\r",
									"const respBody = pm.response.json();\r",
									"\r",
									"//saving as global variable so that other requests can access this.\r",
									"pm.globals.set(\"orderId\",respBody.uuid);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "httpbin.org/uuid",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							],
							"query": [
								{
									"key": "Request 1",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request 2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderID\" : \"{{orderID}}\",\r\n    \"products\" : [\r\n        {\r\n            \"quantity\" : 20,\r\n            \"productId\":3000\r\n        },\r\n        {\r\n            \"quantity\" : 10,\r\n            \"productId\" : 2000\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "httpbin.org/post"
					},
					"response": []
				}
			]
		},
		{
			"name": "OAuth",
			"item": [
				{
					"name": "getCode",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://accounts.google.com/o/oauth2/v2/auth?scope=https://www.googleapis.com/auth/userinfo.email&client_id=692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com&response_type=code&redirect_uri=https://rahulshettyacademy.com/getCourse.php&state=checkstring&auth_url=https://accounts.google.com/o/oauth2/v2/auth",
							"protocol": "https",
							"host": [
								"accounts",
								"google",
								"com"
							],
							"path": [
								"o",
								"oauth2",
								"v2",
								"auth"
							],
							"query": [
								{
									"key": "scope",
									"value": "https://www.googleapis.com/auth/userinfo.email"
								},
								{
									"key": "client_id",
									"value": "692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "redirect_uri",
									"value": "https://rahulshettyacademy.com/getCourse.php"
								},
								{
									"key": "state",
									"value": "checkstring"
								},
								{
									"key": "auth_url",
									"value": "https://accounts.google.com/o/oauth2/v2/auth"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "exchangeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://rahulshettyacademy.com/getCourse.php?state=checkstring&scope=email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid&authuser=0&prompt=consent&code=4%2F0AY0e-g6UUD1-sMKIpsxzb520ZVflKe7i8xD_oQk6X3t_fjDqhaROnrJncgGX7dEF0jllVg&client_id=692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com&client_secret=erZOWM9g3UtwNRj340YYaK_W&auth_url=https://accounts.google.com/o/oauth2/v2/auth&redirect_uri=https://rahulshettyacademy.com/getCourse.php&grant_type=authorization_code",
							"protocol": "https",
							"host": [
								"rahulshettyacademy",
								"com"
							],
							"path": [
								"getCourse.php"
							],
							"query": [
								{
									"key": "state",
									"value": "checkstring"
								},
								{
									"key": "scope",
									"value": "email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid"
								},
								{
									"key": "authuser",
									"value": "0"
								},
								{
									"key": "prompt",
									"value": "consent"
								},
								{
									"key": "authuser",
									"value": "1",
									"disabled": true
								},
								{
									"key": "code",
									"value": "4%2F0AY0e-g6UUD1-sMKIpsxzb520ZVflKe7i8xD_oQk6X3t_fjDqhaROnrJncgGX7dEF0jllVg"
								},
								{
									"key": "client_id",
									"value": "692183103107-p0m7ent2hk7suguv4vq22hjcfhcr43pj.apps.googleusercontent.com"
								},
								{
									"key": "client_secret",
									"value": "erZOWM9g3UtwNRj340YYaK_W"
								},
								{
									"key": "auth_url",
									"value": "https://accounts.google.com/o/oauth2/v2/auth"
								},
								{
									"key": "redirect_uri",
									"value": "https://rahulshettyacademy.com/getCourse.php"
								},
								{
									"key": "grant_type",
									"value": "authorization_code"
								},
								{
									"key": "code",
									"value": "4%2F0AdQt8qg7m-EyTqczqI8zbBHkdG1ETqlm5nSw-aVuHmIP1lgrbLHTH89UrwX1AJA5BiZo_g",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "randomPaste",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "actualRequest",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"useBrowser": false,
								"addTokenTo": "header"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://rahulshettyacademy.com/getCourse.php?code={{code}}",
							"protocol": "https",
							"host": [
								"rahulshettyacademy",
								"com"
							],
							"path": [
								"getCourse.php"
							],
							"query": [
								{
									"key": "code",
									"value": "{{code}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		}
	]
}